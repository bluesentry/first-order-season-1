name: Upload Terraform Workflow Logs to S3

on:
  # Trigger after the Terraform workflow completes
  workflow_run:
    workflows: ["Terraform Deploy AWS Infrastructure"]
    types:
      - completed
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Run ID of the Terraform workflow to download logs from (leave empty for latest)'
        required: false

permissions:
  id-token: write  # Required for OIDC authentication with AWS
  contents: read
  actions: read    # Required to download workflow logs

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 704855531002
  ROLE_NAME: BlueSentry
  S3_BUCKET: first-order-application-logs
  S3_PREFIX: log-analysis

jobs:
  upload-terraform-logs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Generate timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV
      
      - name: Create temp directory for logs
        run: mkdir -p /tmp/terraform-logs
      
      - name: Determine run ID
        id: determine-run-id
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.run_id }}" ]; then
            echo "RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV
          else
            # Get the latest run ID of the Terraform workflow
            REPO="${{ github.repository }}"
            WORKFLOW_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${REPO}/actions/workflows" | \
              jq -r '.workflows[] | select(.name=="Terraform Deploy AWS Infrastructure") | .id')
            
            LATEST_RUN_ID=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${REPO}/actions/workflows/${WORKFLOW_ID}/runs?per_page=1" | \
              jq -r '.workflow_runs[0].id')
            
            echo "RUN_ID=${LATEST_RUN_ID}" >> $GITHUB_ENV
          fi
          
          echo "Using Run ID: ${{ env.RUN_ID }}"
      
      - name: Download workflow logs
        run: |
          # Download logs using GitHub API
          echo "Downloading logs for workflow run ${{ env.RUN_ID }}..."
          
          # Get workflow run info
          REPO="${{ github.repository }}"
          API_URL="https://api.github.com/repos/${REPO}/actions/runs/${{ env.RUN_ID }}/logs"
          
          # Download logs zip file
          curl -L -o /tmp/terraform-logs/logs.zip \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            ${API_URL}
          
          # Extract logs
          unzip -o /tmp/terraform-logs/logs.zip -d /tmp/terraform-logs/
          
          # List downloaded logs
          echo "Downloaded logs:"
          ls -la /tmp/terraform-logs/
      
      - name: Get workflow run details
        run: |
          REPO="${{ github.repository }}"
          RUN_DETAILS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${REPO}/actions/runs/${{ env.RUN_ID }}")
          
          # Extract workflow name and other details
          WORKFLOW_NAME=$(echo $RUN_DETAILS | jq -r '.workflow_id')
          RUN_NUMBER=$(echo $RUN_DETAILS | jq -r '.run_number')
          RUN_ATTEMPT=$(echo $RUN_DETAILS | jq -r '.run_attempt')
          EVENT_NAME=$(echo $RUN_DETAILS | jq -r '.event')
          ACTOR=$(echo $RUN_DETAILS | jq -r '.actor.login')
          
          # Create metadata file with workflow information
          cat > /tmp/terraform-logs/workflow-info.json << EOF
          {
            "repository": "${{ github.repository }}",
            "workflow_name": "Terraform Deploy AWS Infrastructure",
            "workflow_id": "${WORKFLOW_NAME}",
            "run_id": "${{ env.RUN_ID }}",
            "run_number": "${RUN_NUMBER}",
            "run_attempt": "${RUN_ATTEMPT}",
            "event_name": "${EVENT_NAME}",
            "timestamp": "${{ env.TIMESTAMP }}",
            "actor": "${ACTOR}"
          }
          EOF
      
      - name: Upload logs to S3
        run: |
          # Upload logs to S3
          echo "Uploading Terraform workflow logs to S3..."
          aws s3 sync /tmp/terraform-logs/ s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}/terraform-workflow-logs/${{ env.TIMESTAMP }}/
          
          echo "Logs uploaded successfully to s3://${{ env.S3_BUCKET }}/${{ env.S3_PREFIX }}/terraform-workflow-logs/${{ env.TIMESTAMP }}/"
